// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RuOverflow.Questions.EF;

#nullable disable

namespace RuOverflow.Questions.Migrations
{
    [DbContext(typeof(RuFlowDbContext))]
    partial class RuFlowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuestionTag", b =>
                {
                    b.Property<Guid>("QuestionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("QuestionsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("QuestionTag");
                });

            modelBuilder.Entity("RuOverflow.Questions.Features.Answers.Models.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("RuOverflow.Questions.Features.Questions.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63692500-6acf-4a74-9b6a-b99b092b0841"),
                            Body = "Тело1?",
                            Created = new DateTime(2022, 4, 19, 18, 31, 47, 88, DateTimeKind.Utc).AddTicks(1620),
                            Rating = 0,
                            Title = "Контент1",
                            UserId = new Guid("358bdac5-6ac6-4776-87df-d94b6b7db0ee")
                        },
                        new
                        {
                            Id = new Guid("63645098-b77b-49ad-b924-bf1d6dfadef8"),
                            Body = "Тело2?",
                            Created = new DateTime(2022, 4, 19, 18, 31, 47, 88, DateTimeKind.Utc).AddTicks(3022),
                            Rating = 0,
                            Title = "Контент2",
                            UserId = new Guid("84b9f2ce-d9d3-4cfd-b90d-0d62eb50abf9")
                        },
                        new
                        {
                            Id = new Guid("e12506fe-b6ae-43dc-9bea-927bd1d82788"),
                            Body = "Тело3?",
                            Created = new DateTime(2022, 4, 19, 18, 31, 47, 88, DateTimeKind.Utc).AddTicks(3025),
                            Rating = 0,
                            Title = "Контент3",
                            UserId = new Guid("86118127-0de2-43e0-89e0-0150a2196e59")
                        },
                        new
                        {
                            Id = new Guid("c122f210-041d-4871-b173-00fc945f58d1"),
                            Body = "Тело4?",
                            Created = new DateTime(2022, 4, 19, 18, 31, 47, 88, DateTimeKind.Utc).AddTicks(3028),
                            Rating = 0,
                            Title = "Контент4",
                            UserId = new Guid("8b364fad-a5a4-4ecf-a990-bdb941191cc2")
                        },
                        new
                        {
                            Id = new Guid("98a9c0e6-9661-4a06-9796-c969f009f875"),
                            Body = "Тело5?",
                            Created = new DateTime(2022, 4, 19, 18, 31, 47, 88, DateTimeKind.Utc).AddTicks(3029),
                            Rating = 0,
                            Title = "Контент5",
                            UserId = new Guid("26d1db82-fd40-476f-9bd1-7367fa7793bb")
                        });
                });

            modelBuilder.Entity("RuOverflow.Questions.Features.Tags.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8cc1b13b-10b9-4fd5-808e-c71b6194e658"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Лучший язык программирования в мире!",
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("329cebd4-0a0e-4ec4-96ee-b9c05d195374"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Лучший язык программироваия в мире!(после C#)",
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = new Guid("4b4953d1-8611-4d5c-be7f-5dc61de1fc0a"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "кiт",
                            Name = "Docker"
                        },
                        new
                        {
                            Id = new Guid("86220849-24b0-4608-b3c3-4fbd5237a46c"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Лучший брокер(после тинькоффа)",
                            Name = "Kafka"
                        });
                });

            modelBuilder.Entity("QuestionTag", b =>
                {
                    b.HasOne("RuOverflow.Questions.Features.Questions.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RuOverflow.Questions.Features.Tags.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuOverflow.Questions.Features.Answers.Models.Answer", b =>
                {
                    b.HasOne("RuOverflow.Questions.Features.Questions.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("RuOverflow.Questions.Features.Questions.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
